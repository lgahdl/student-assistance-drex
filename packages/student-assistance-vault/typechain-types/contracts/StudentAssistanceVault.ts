/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace StudentAssistanceVault {
  export type StudentStruct = {
    studentAddress: AddressLike;
    monthlyAmount: BigNumberish;
    isActive: boolean;
    registeredAt: BigNumberish;
  };

  export type StudentStructOutput = [
    studentAddress: string,
    monthlyAmount: bigint,
    isActive: boolean,
    registeredAt: bigint
  ] & {
    studentAddress: string;
    monthlyAmount: bigint;
    isActive: boolean;
    registeredAt: bigint;
  };
}

export interface StudentAssistanceVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_BATCH_SIZE"
      | "MAX_STUDENTS"
      | "STAFF_ROLE"
      | "balances"
      | "depositDrex"
      | "distributeBatch"
      | "distributeMonthlyAllowances"
      | "drexToken"
      | "emergencyWithdraw"
      | "getAllStudents"
      | "getBatchInfo"
      | "getContractBalance"
      | "getRoleAdmin"
      | "getStudentAtIndex"
      | "getStudentBalance"
      | "getStudentCount"
      | "getStudentInfo"
      | "getTotalDistributedAmount"
      | "getTotalExpectedAmount"
      | "grantRole"
      | "grantStaffRole"
      | "hasRole"
      | "isStudent"
      | "lastDistributionTimestamp"
      | "registerStudent"
      | "removeStudent"
      | "renounceRole"
      | "revokeRole"
      | "revokeStaffRole"
      | "studentAddresses"
      | "students"
      | "supportsInterface"
      | "totalDistributedAmount"
      | "totalExpectedAmount"
      | "transfer"
      | "updateStudentAmount"
      | "withdrawAll"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchDistribution"
      | "DrexDeposited"
      | "EmergencyWithdraw"
      | "MonthlyDistribution"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "StaffRoleGranted"
      | "StaffRoleRevoked"
      | "StudentRegistered"
      | "StudentRemoved"
      | "StudentUpdated"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BATCH_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_STUDENTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAFF_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositDrex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeBatch",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeMonthlyAllowances",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "drexToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStudents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDistributedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalExpectedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantStaffRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isStudent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastDistributionTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerStudent",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStudent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeStaffRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "studentAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "students",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDistributedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalExpectedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStudentAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BATCH_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_STUDENTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "STAFF_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositDrex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeMonthlyAllowances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drexToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllStudents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDistributedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalExpectedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantStaffRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isStudent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastDistributionTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeStaffRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "studentAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "students", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDistributedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalExpectedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateStudentAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
}

export namespace BatchDistributionEvent {
  export type InputTuple = [
    startIndex: BigNumberish,
    endIndex: BigNumberish,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    startIndex: bigint,
    endIndex: bigint,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    startIndex: bigint;
    endIndex: bigint;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DrexDepositedEvent {
  export type InputTuple = [
    from: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [from: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawEvent {
  export type InputTuple = [
    admin: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [admin: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    admin: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MonthlyDistributionEvent {
  export type InputTuple = [
    totalAmount: BigNumberish,
    studentsCount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    totalAmount: bigint,
    studentsCount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    totalAmount: bigint;
    studentsCount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StaffRoleGrantedEvent {
  export type InputTuple = [
    account: AddressLike,
    admin: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [account: string, admin: string, timestamp: bigint];
  export interface OutputObject {
    account: string;
    admin: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StaffRoleRevokedEvent {
  export type InputTuple = [
    account: AddressLike,
    admin: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [account: string, admin: string, timestamp: bigint];
  export interface OutputObject {
    account: string;
    admin: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StudentRegisteredEvent {
  export type InputTuple = [
    student: AddressLike,
    monthlyAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    student: string,
    monthlyAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    student: string;
    monthlyAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StudentRemovedEvent {
  export type InputTuple = [student: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [student: string, timestamp: bigint];
  export interface OutputObject {
    student: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StudentUpdatedEvent {
  export type InputTuple = [
    student: AddressLike,
    oldAmount: BigNumberish,
    newAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    student: string,
    oldAmount: bigint,
    newAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    student: string;
    oldAmount: bigint;
    newAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StudentAssistanceVault extends BaseContract {
  connect(runner?: ContractRunner | null): StudentAssistanceVault;
  waitForDeployment(): Promise<this>;

  interface: StudentAssistanceVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_BATCH_SIZE: TypedContractMethod<[], [bigint], "view">;

  MAX_STUDENTS: TypedContractMethod<[], [bigint], "view">;

  STAFF_ROLE: TypedContractMethod<[], [string], "view">;

  balances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  depositDrex: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  distributeBatch: TypedContractMethod<
    [startIndex: BigNumberish, endIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  distributeMonthlyAllowances: TypedContractMethod<[], [void], "nonpayable">;

  drexToken: TypedContractMethod<[], [string], "view">;

  emergencyWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllStudents: TypedContractMethod<[], [string[]], "view">;

  getBatchInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalStudents: bigint;
        maxBatchSize: bigint;
        estimatedBatches: bigint;
      }
    ],
    "view"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getStudentAtIndex: TypedContractMethod<
    [index: BigNumberish],
    [string],
    "view"
  >;

  getStudentBalance: TypedContractMethod<
    [student: AddressLike],
    [bigint],
    "view"
  >;

  getStudentCount: TypedContractMethod<[], [bigint], "view">;

  getStudentInfo: TypedContractMethod<
    [student: AddressLike],
    [StudentAssistanceVault.StudentStructOutput],
    "view"
  >;

  getTotalDistributedAmount: TypedContractMethod<[], [bigint], "view">;

  getTotalExpectedAmount: TypedContractMethod<[], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantStaffRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isStudent: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  lastDistributionTimestamp: TypedContractMethod<[], [bigint], "view">;

  registerStudent: TypedContractMethod<
    [studentAddress: AddressLike, monthlyAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeStudent: TypedContractMethod<
    [studentAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeStaffRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  studentAddresses: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  students: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean, bigint] & {
        studentAddress: string;
        monthlyAmount: bigint;
        isActive: boolean;
        registeredAt: bigint;
      }
    ],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalDistributedAmount: TypedContractMethod<[], [bigint], "view">;

  totalExpectedAmount: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateStudentAmount: TypedContractMethod<
    [studentAddress: AddressLike, newAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawAll: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_BATCH_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_STUDENTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STAFF_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositDrex"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributeBatch"
  ): TypedContractMethod<
    [startIndex: BigNumberish, endIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributeMonthlyAllowances"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "drexToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllStudents"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getBatchInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalStudents: bigint;
        maxBatchSize: bigint;
        estimatedBatches: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getStudentAtIndex"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getStudentBalance"
  ): TypedContractMethod<[student: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStudentCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStudentInfo"
  ): TypedContractMethod<
    [student: AddressLike],
    [StudentAssistanceVault.StudentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalDistributedAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalExpectedAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantStaffRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isStudent"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastDistributionTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerStudent"
  ): TypedContractMethod<
    [studentAddress: AddressLike, monthlyAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeStudent"
  ): TypedContractMethod<[studentAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeStaffRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "studentAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "students"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean, bigint] & {
        studentAddress: string;
        monthlyAmount: bigint;
        isActive: boolean;
        registeredAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalDistributedAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalExpectedAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateStudentAmount"
  ): TypedContractMethod<
    [studentAddress: AddressLike, newAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAll"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BatchDistribution"
  ): TypedContractEvent<
    BatchDistributionEvent.InputTuple,
    BatchDistributionEvent.OutputTuple,
    BatchDistributionEvent.OutputObject
  >;
  getEvent(
    key: "DrexDeposited"
  ): TypedContractEvent<
    DrexDepositedEvent.InputTuple,
    DrexDepositedEvent.OutputTuple,
    DrexDepositedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdraw"
  ): TypedContractEvent<
    EmergencyWithdrawEvent.InputTuple,
    EmergencyWithdrawEvent.OutputTuple,
    EmergencyWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "MonthlyDistribution"
  ): TypedContractEvent<
    MonthlyDistributionEvent.InputTuple,
    MonthlyDistributionEvent.OutputTuple,
    MonthlyDistributionEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "StaffRoleGranted"
  ): TypedContractEvent<
    StaffRoleGrantedEvent.InputTuple,
    StaffRoleGrantedEvent.OutputTuple,
    StaffRoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "StaffRoleRevoked"
  ): TypedContractEvent<
    StaffRoleRevokedEvent.InputTuple,
    StaffRoleRevokedEvent.OutputTuple,
    StaffRoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "StudentRegistered"
  ): TypedContractEvent<
    StudentRegisteredEvent.InputTuple,
    StudentRegisteredEvent.OutputTuple,
    StudentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "StudentRemoved"
  ): TypedContractEvent<
    StudentRemovedEvent.InputTuple,
    StudentRemovedEvent.OutputTuple,
    StudentRemovedEvent.OutputObject
  >;
  getEvent(
    key: "StudentUpdated"
  ): TypedContractEvent<
    StudentUpdatedEvent.InputTuple,
    StudentUpdatedEvent.OutputTuple,
    StudentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "BatchDistribution(uint256,uint256,uint256,uint256)": TypedContractEvent<
      BatchDistributionEvent.InputTuple,
      BatchDistributionEvent.OutputTuple,
      BatchDistributionEvent.OutputObject
    >;
    BatchDistribution: TypedContractEvent<
      BatchDistributionEvent.InputTuple,
      BatchDistributionEvent.OutputTuple,
      BatchDistributionEvent.OutputObject
    >;

    "DrexDeposited(address,uint256,uint256)": TypedContractEvent<
      DrexDepositedEvent.InputTuple,
      DrexDepositedEvent.OutputTuple,
      DrexDepositedEvent.OutputObject
    >;
    DrexDeposited: TypedContractEvent<
      DrexDepositedEvent.InputTuple,
      DrexDepositedEvent.OutputTuple,
      DrexDepositedEvent.OutputObject
    >;

    "EmergencyWithdraw(address,uint256,uint256)": TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;
    EmergencyWithdraw: TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;

    "MonthlyDistribution(uint256,uint256,uint256)": TypedContractEvent<
      MonthlyDistributionEvent.InputTuple,
      MonthlyDistributionEvent.OutputTuple,
      MonthlyDistributionEvent.OutputObject
    >;
    MonthlyDistribution: TypedContractEvent<
      MonthlyDistributionEvent.InputTuple,
      MonthlyDistributionEvent.OutputTuple,
      MonthlyDistributionEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "StaffRoleGranted(address,address,uint256)": TypedContractEvent<
      StaffRoleGrantedEvent.InputTuple,
      StaffRoleGrantedEvent.OutputTuple,
      StaffRoleGrantedEvent.OutputObject
    >;
    StaffRoleGranted: TypedContractEvent<
      StaffRoleGrantedEvent.InputTuple,
      StaffRoleGrantedEvent.OutputTuple,
      StaffRoleGrantedEvent.OutputObject
    >;

    "StaffRoleRevoked(address,address,uint256)": TypedContractEvent<
      StaffRoleRevokedEvent.InputTuple,
      StaffRoleRevokedEvent.OutputTuple,
      StaffRoleRevokedEvent.OutputObject
    >;
    StaffRoleRevoked: TypedContractEvent<
      StaffRoleRevokedEvent.InputTuple,
      StaffRoleRevokedEvent.OutputTuple,
      StaffRoleRevokedEvent.OutputObject
    >;

    "StudentRegistered(address,uint256,uint256)": TypedContractEvent<
      StudentRegisteredEvent.InputTuple,
      StudentRegisteredEvent.OutputTuple,
      StudentRegisteredEvent.OutputObject
    >;
    StudentRegistered: TypedContractEvent<
      StudentRegisteredEvent.InputTuple,
      StudentRegisteredEvent.OutputTuple,
      StudentRegisteredEvent.OutputObject
    >;

    "StudentRemoved(address,uint256)": TypedContractEvent<
      StudentRemovedEvent.InputTuple,
      StudentRemovedEvent.OutputTuple,
      StudentRemovedEvent.OutputObject
    >;
    StudentRemoved: TypedContractEvent<
      StudentRemovedEvent.InputTuple,
      StudentRemovedEvent.OutputTuple,
      StudentRemovedEvent.OutputObject
    >;

    "StudentUpdated(address,uint256,uint256,uint256)": TypedContractEvent<
      StudentUpdatedEvent.InputTuple,
      StudentUpdatedEvent.OutputTuple,
      StudentUpdatedEvent.OutputObject
    >;
    StudentUpdated: TypedContractEvent<
      StudentUpdatedEvent.InputTuple,
      StudentUpdatedEvent.OutputTuple,
      StudentUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
