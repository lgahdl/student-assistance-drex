/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SwapTwoStepsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelSwap"
      | "executeSwap"
      | "startSwap"
      | "swapProposals"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExpiredProposal"
      | "SwapCancelled"
      | "SwapExecuted"
      | "SwapStarted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelSwap",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSwap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startSwap",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapProposals",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "cancelSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapProposals",
    data: BytesLike
  ): Result;
}

export namespace ExpiredProposalEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapCancelledEvent {
  export type InputTuple = [proposalId: BigNumberish, reason: string];
  export type OutputTuple = [proposalId: bigint, reason: string];
  export interface OutputObject {
    proposalId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapExecutedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    senderNumber: BigNumberish,
    receiverNumber: BigNumberish,
    sender: AddressLike,
    receiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    senderNumber: bigint,
    receiverNumber: bigint,
    sender: string,
    receiver: string,
    amount: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    senderNumber: bigint;
    receiverNumber: bigint;
    sender: string;
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapStartedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    senderNumber: BigNumberish,
    receiverNumber: BigNumberish,
    sender: AddressLike,
    receiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    senderNumber: bigint,
    receiverNumber: bigint,
    sender: string,
    receiver: string,
    amount: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    senderNumber: bigint;
    receiverNumber: bigint;
    sender: string;
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SwapTwoSteps extends BaseContract {
  connect(runner?: ContractRunner | null): SwapTwoSteps;
  waitForDeployment(): Promise<this>;

  interface: SwapTwoStepsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelSwap: TypedContractMethod<
    [proposalId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  executeSwap: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  startSwap: TypedContractMethod<
    [
      tokenSender: AddressLike,
      tokenReceiver: AddressLike,
      receiver: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  swapProposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint, bigint, bigint] & {
        tokenSender: string;
        tokenReceiver: string;
        sender: string;
        receiver: string;
        amount: bigint;
        status: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelSwap"
  ): TypedContractMethod<
    [proposalId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeSwap"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startSwap"
  ): TypedContractMethod<
    [
      tokenSender: AddressLike,
      tokenReceiver: AddressLike,
      receiver: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapProposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint, bigint, bigint] & {
        tokenSender: string;
        tokenReceiver: string;
        sender: string;
        receiver: string;
        amount: bigint;
        status: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ExpiredProposal"
  ): TypedContractEvent<
    ExpiredProposalEvent.InputTuple,
    ExpiredProposalEvent.OutputTuple,
    ExpiredProposalEvent.OutputObject
  >;
  getEvent(
    key: "SwapCancelled"
  ): TypedContractEvent<
    SwapCancelledEvent.InputTuple,
    SwapCancelledEvent.OutputTuple,
    SwapCancelledEvent.OutputObject
  >;
  getEvent(
    key: "SwapExecuted"
  ): TypedContractEvent<
    SwapExecutedEvent.InputTuple,
    SwapExecutedEvent.OutputTuple,
    SwapExecutedEvent.OutputObject
  >;
  getEvent(
    key: "SwapStarted"
  ): TypedContractEvent<
    SwapStartedEvent.InputTuple,
    SwapStartedEvent.OutputTuple,
    SwapStartedEvent.OutputObject
  >;

  filters: {
    "ExpiredProposal(uint256)": TypedContractEvent<
      ExpiredProposalEvent.InputTuple,
      ExpiredProposalEvent.OutputTuple,
      ExpiredProposalEvent.OutputObject
    >;
    ExpiredProposal: TypedContractEvent<
      ExpiredProposalEvent.InputTuple,
      ExpiredProposalEvent.OutputTuple,
      ExpiredProposalEvent.OutputObject
    >;

    "SwapCancelled(uint256,string)": TypedContractEvent<
      SwapCancelledEvent.InputTuple,
      SwapCancelledEvent.OutputTuple,
      SwapCancelledEvent.OutputObject
    >;
    SwapCancelled: TypedContractEvent<
      SwapCancelledEvent.InputTuple,
      SwapCancelledEvent.OutputTuple,
      SwapCancelledEvent.OutputObject
    >;

    "SwapExecuted(uint256,uint256,uint256,address,address,uint256)": TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
    SwapExecuted: TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;

    "SwapStarted(uint256,uint256,uint256,address,address,uint256)": TypedContractEvent<
      SwapStartedEvent.InputTuple,
      SwapStartedEvent.OutputTuple,
      SwapStartedEvent.OutputObject
    >;
    SwapStarted: TypedContractEvent<
      SwapStartedEvent.InputTuple,
      SwapStartedEvent.OutputTuple,
      SwapStartedEvent.OutputObject
    >;
  };
}
