/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace KeyDictionary {
  export type CustomerDataStruct = {
    taxId: BigNumberish;
    bankNumber: BigNumberish;
    account: BigNumberish;
    branch: BigNumberish;
    wallet: AddressLike;
    registered: boolean;
    owner: AddressLike;
  };

  export type CustomerDataStructOutput = [
    taxId: bigint,
    bankNumber: bigint,
    account: bigint,
    branch: bigint,
    wallet: string,
    registered: boolean,
    owner: string
  ] & {
    taxId: bigint;
    bankNumber: bigint;
    account: bigint;
    branch: bigint;
    wallet: string;
    registered: boolean;
    owner: string;
  };
}

export interface KeyDictionaryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAccount"
      | "authorizeKey"
      | "getCustomerData"
      | "getKey"
      | "getWallet"
      | "requestKey"
      | "updateData"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "KeyRequested"): EventFragment;

  encodeFunctionData(
    functionFragment: "addAccount",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeKey",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCustomerData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getKey", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getWallet",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestKey",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateData",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCustomerData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requestKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateData", data: BytesLike): Result;
}

export namespace KeyRequestedEvent {
  export type InputTuple = [
    owner: AddressLike,
    proposalId: BigNumberish,
    key: BytesLike
  ];
  export type OutputTuple = [owner: string, proposalId: bigint, key: string];
  export interface OutputObject {
    owner: string;
    proposalId: bigint;
    key: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KeyDictionary extends BaseContract {
  connect(runner?: ContractRunner | null): KeyDictionary;
  waitForDeployment(): Promise<this>;

  interface: KeyDictionaryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAccount: TypedContractMethod<
    [
      key: BytesLike,
      _taxId: BigNumberish,
      _bankNumber: BigNumberish,
      _account: BigNumberish,
      _branch: BigNumberish,
      _wallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  authorizeKey: TypedContractMethod<
    [proposalId: BigNumberish, key: BytesLike],
    [void],
    "nonpayable"
  >;

  getCustomerData: TypedContractMethod<
    [key: BytesLike],
    [KeyDictionary.CustomerDataStructOutput],
    "view"
  >;

  getKey: TypedContractMethod<[wallet: AddressLike], [string], "view">;

  getWallet: TypedContractMethod<[key: BytesLike], [string], "view">;

  requestKey: TypedContractMethod<
    [
      key: BytesLike,
      _taxId: BigNumberish,
      _bankNumber: BigNumberish,
      _account: BigNumberish,
      _branch: BigNumberish,
      _wallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  updateData: TypedContractMethod<
    [
      key: BytesLike,
      _taxId: BigNumberish,
      _bankNumber: BigNumberish,
      _account: BigNumberish,
      _branch: BigNumberish,
      _wallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAccount"
  ): TypedContractMethod<
    [
      key: BytesLike,
      _taxId: BigNumberish,
      _bankNumber: BigNumberish,
      _account: BigNumberish,
      _branch: BigNumberish,
      _wallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizeKey"
  ): TypedContractMethod<
    [proposalId: BigNumberish, key: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCustomerData"
  ): TypedContractMethod<
    [key: BytesLike],
    [KeyDictionary.CustomerDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getKey"
  ): TypedContractMethod<[wallet: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getWallet"
  ): TypedContractMethod<[key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "requestKey"
  ): TypedContractMethod<
    [
      key: BytesLike,
      _taxId: BigNumberish,
      _bankNumber: BigNumberish,
      _account: BigNumberish,
      _branch: BigNumberish,
      _wallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateData"
  ): TypedContractMethod<
    [
      key: BytesLike,
      _taxId: BigNumberish,
      _bankNumber: BigNumberish,
      _account: BigNumberish,
      _branch: BigNumberish,
      _wallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "KeyRequested"
  ): TypedContractEvent<
    KeyRequestedEvent.InputTuple,
    KeyRequestedEvent.OutputTuple,
    KeyRequestedEvent.OutputObject
  >;

  filters: {
    "KeyRequested(address,uint256,bytes32)": TypedContractEvent<
      KeyRequestedEvent.InputTuple,
      KeyRequestedEvent.OutputTuple,
      KeyRequestedEvent.OutputObject
    >;
    KeyRequested: TypedContractEvent<
      KeyRequestedEvent.InputTuple,
      KeyRequestedEvent.OutputTuple,
      KeyRequestedEvent.OutputObject
    >;
  };
}
